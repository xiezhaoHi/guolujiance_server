/*
infuser.js by Jim Cowart
License: Dual licensed MIT (http://www.opensource.org/licenses/mit-license) & GPL (http://www.opensource.org/licenses/gpl-license)
Version 0.2.0
*/
(function (e, t, n) { var r = { templates: {}, storeTemplate: function (e, t) { this.templates[e] = t }, getTemplate: function (e) { return this.templates[e] }, purge: function () { this.templates = {} } }; var i = { templateIds: [], storeTemplate: function (e, t) { var n = document.getElementById(e); if (n === null) { this.templateIds.push(e); n = document.createElement("script"); n.type = "text/html"; n.id = e; document.body.appendChild(n) } n.text = t }, getTemplate: function (e) { return document.getElementById(e) }, purge: function () { for (var e = 0; e < this.templateIds.length; e++) { document.body.removeChild(document.getElementById(this.templateIds[e])) } this.templateIds = [] } }; var s = "<div class='infuser-error'>The template <a href='{TEMPLATEURL}'>{TEMPLATEID}</a> could not be loaded. {STATUS}</div>", o = function (e, t, n) { return s.replace("{STATUS}", e).replace("{TEMPLATEID}", t).replace("{TEMPLATEURL}", n) }, u = []; var a = { getTemplatePath: function (e) { var t = e.templatePrefix + e.templateId + e.templateSuffix; return e.templateUrl === n || e.templateUrl === "" ? t : e.templateUrl + "/" + t }, templateGetSuccess: function (e, t) { return function (n) { l.store.storeTemplate(e, n); t(l.store.getTemplate(e)) } }, templateGetError: function (t, n, r) { return function (i) { if (e.inArray(t, u) === -1) { u.push(t) } var s = o("HTTP Status code: " + i.status, t, n); l.store.storeTemplate(t, s); r(l.store.getTemplate(t)) } }, getAjaxOptions: function (e) { } }, f = ["target", "loadingTemplate", "postRender", "preRender", "render", "bindingInstruction", "useLoadingTemplate", "model", "templateUrl", "templateSuffix", "templatePrefix", ""]; var l = { storageOptions: { hash: r, script: i }, store: r, defaults: { templateUrl: "/Template", templateSuffix: ".html", templatePrefix: "", ajax: { async: true, dataType: "html", type: "GET" }, target: function (e) { return "#" + e }, loadingTemplate: { content: '<div class="infuser-loading">Loading...</div>', transitionIn: function (t, n) { var r = e(t); r.hide(); r.html(n); r.fadeIn() }, transitionOut: function (t) { e(t).html("") } }, postRender: function (e) { }, preRender: function (e, t) { }, render: function (t, n) { var r = e(t); if (r.children().length === 0) { r.append(e(n)) } else { r.children().replaceWith(e(n)) } }, bindingInstruction: function (e, t) { return e }, useLoadingTemplate: true }, get: function (t, n) { var r = e.extend({}, l.defaults, typeof t === "object" ? t : { templateId: t }), i; r.ajax.url = a.getTemplatePath(r); i = l.store.getTemplate(r.ajax.url); if (!i || e.inArray(r.ajax.url, u) !== -1) { r.ajax.success = a.templateGetSuccess(r.ajax.url, n); r.ajax.error = a.templateGetError(r.templateId, r.ajax.url, n); e.trafficCop(r.ajax) } else { n(i) } }, getSync: function (t) { var n = e.extend({}, l.defaults, typeof t === "object" ? t : { templateId: t }, { ajax: { async: false } }), r, i; n.ajax.url = a.getTemplatePath(n); r = l.store.getTemplate(n.ajax.url); if (!r || e.inArray(n.ajax.url, u) !== -1) { i = null; n.ajax.success = function (e) { i = e }; n.ajax.error = function (t) { if (e.inArray(n.ajax.url) === -1) { u.push(n.ajax.url) } i = o("HTTP Status code: exception.status", n.templateId, n.ajax.url) }; e.ajax(n.ajax); if (i === null) { i = o("An unknown error occurred.", n.templateId, n.ajax.url) } else { l.store.storeTemplate(n.ajax.url, i); r = l.store.getTemplate(n.ajax.url) } } return r }, infuse: function (t, r) { var i = e.extend({}, l.defaults, typeof t === "object" ? t : r, typeof t === "string" ? { templateId: t } : n), s = typeof i.target === "function" ? i.target(t) : i.target; if (i.useLoadingTemplate) { i.loadingTemplate.transitionIn(s, i.loadingTemplate.content) } l.get(i, function (e) { var t = e; i.preRender(s, t); t = i.bindingInstruction(t, i.model); if (i.useLoadingTemplate) { i.loadingTemplate.transitionOut(s) } i.render(s, t); i.postRender(s) }) } }; t.infuser = l })(jQuery, window);